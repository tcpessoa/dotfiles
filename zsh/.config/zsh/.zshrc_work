export PATH="/usr/local/opt/openjdk@8/bin:$PATH"
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"


## DataIQ apps config helper
getapp() {
    if ! kubectl version --request-timeout='3s' &>/dev/null; then
        echo "Failed to connect to the Kubernetes cluster."
        return
    fi
    kubens dataiq
    local secret_name=$(kubectl get secret | grep dataiq-apps | awk '{print $1}')
    if [[ -z $secret_name ]]; then
        echo "No secret found containing 'dataiq-apps'."
        return
    fi

    local json_b64=$(kubectl get secret "$secret_name" -o "jsonpath={.data['apps\.json']}")
    local decoded_json=$(echo "$json_b64" | base64 -d)
    local decoded_json=$(printf '%s' "$decoded_json" | sed 's/\\/\\\\/g')

    local app_names=$(jq -r '.[].appName' <<< "$decoded_json")
    local app_name=$(echo "$app_names" | fzf --height 40% --reverse --prompt 'Select an app: ')

    if [[ -z $app_name ]]; then
        echo "No app selected."
        return
    fi

    local app_details=$(printf '%s' "$decoded_json" |
    jq -r --arg app_name "$app_name" '.[] | select(.appName == $app_name)')

    local keys=$(printf '%s' "$app_details" | jq -r '.config | keys[]')

    keys=$(printf "%s\n%s\n%s" "ALL DATA" "datastore.default" "$keys")

    local selected_key=$(echo "$keys" | fzf --height 40% --reverse --prompt 'Select data to display: ')

    if [[ "$selected_key" == "ALL DATA" ]]; then
      # re add color to the output
        echo "$app_details" | jq -C
    else
        echo "$app_details" | jq -C -r ".config.$selected_key"
    fi
}
