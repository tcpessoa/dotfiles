#!/usr/bin/env bash

set -euo pipefail

HOST=$(hostname -s)

special_install_packages=(rust nvm tms pnpm angular-cli)
special_install_commands=(
    'curl --proto "=https" --tlsv1.2 -sSf https://sh.rustup.rs | sh'
    'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash'
    'cargo install tmux-sessionizer'
    'npm install -g pnpm'
    'npm install -g @angular/cli'
)

cask_packages=(
    firefox
    ghostty
    postman
    visual-studio-code
    rectangle
    caffeine
    karabiner-elements
    dbeaver-community
    font-hack-nerd-font
)

get_special_install() {
    local package=$1
    for i in "${!special_install_packages[@]}"; do
        if [ "${special_install_packages[$i]}" = "$package" ]; then
            echo "${special_install_commands[$i]}"
            return 0
        fi
    done
    return 1
}

is_cask() {
    local package=$1
    for cask in "${cask_packages[@]}"; do
        if [ "$cask" = "$package" ]; then
            return 0
        fi
    done
    return 1
}

is_installed() {
    local package=$1
    
    case $package in
        rust)
            command -v rustc >/dev/null 2>&1
            return
            ;;
        nvm)
            [ -d "$HOME/.nvm" ]
            return
            ;;
        uv)
            command -v uv >/dev/null 2>&1
            return
            ;;
        tms)
            command -v tms >/dev/null 2>&1
            return
            ;;
        pnpm)
            command -v pnpm >/dev/null 2>&1
            return
            ;;
        angular-cli)
            command -v ng >/dev/null 2>&1
            return
            ;;
    esac
    
    if is_cask "$package"; then
        brew list --cask 2>/dev/null | tr ' ' '\n' | grep -Fx "$package" >/dev/null
    else
        brew list 2>/dev/null | tr ' ' '\n' | grep -Fx "$package" >/dev/null
    fi
}

install_package() {
    local package=$1
    
    if is_installed "$package"; then
        echo "✓ $package is already installed"
        return
    fi
    
    local special_cmd
    if special_cmd=$(get_special_install "$package"); then
        echo "Installing $package using custom method..."
        if eval "$special_cmd"; then
            echo "✓ Successfully installed $package"
        else
            echo "❌ Failed to install $package"
            return 1
        fi
        return
    fi
    
    if is_cask "$package"; then
        echo "Installing cask $package..."
        if brew install --cask "$package"; then
            echo "✓ Successfully installed cask $package"
        else
            echo "❌ Failed to install cask $package"
            return 1
        fi
    else
        echo "Installing formula $package..."
        if brew install "$package"; then
            echo "✓ Successfully installed formula $package"
        else
            echo "❌ Failed to install formula $package"
            return 1
        fi
    fi
}

install_from_file() {
    local file=$1
    if [ -f "$file" ]; then
        relative_path=${file#"$SCRIPT_DIR/"}
        echo "Installing packages from: $relative_path"
        while IFS= read -r package || [[ -n "$package" ]]; do
            # Skip empty lines and comments
            [[ -z "$package" || "$package" =~ ^# ]] && continue
            install_package "$package" || echo "Failed to install $package, continuing..."
        done < "$file"
        return 0
    fi
    return 1
}


SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Install packages base
HOST_BASE_FILE="${SCRIPT_DIR}/group/${HOST}/base"
if [ -f "$HOST_BASE_FILE" ]; then
    install_from_file "$HOST_BASE_FILE"
fi

# Install packages from host-specific files (if any exist)
HOST_DIR="${SCRIPT_DIR}/group/${HOST}"
if [ -d "$HOST_DIR" ]; then
    for file in "$HOST_DIR"/*; do
        if [ -f "$file" ] && [ "$(basename "$file")" != "base" ]; then
            install_from_file "$file"
        fi
    done
fi

if [ -f "${SCRIPT_DIR}/health" ]; then
    echo "Running health check..."
    if bash "${SCRIPT_DIR}/health"; then
        echo "✅ Health check passed"
    else
        echo "❌ Health check failed"
    fi
else
    echo "Health check script not found, skipping..."
fi

echo "Package installation complete!"
