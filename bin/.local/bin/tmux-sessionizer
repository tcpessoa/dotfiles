#!/bin/bash

# JSON configuration as a heredoc
# when a path has no depth specified, it is treated as a direct repository
# Note: using 'EOF' instead of 'ENDCONFIG' to allow variable expansion
read -r -d '' CONFIG << EOF
{
  "repos": [
    {
      "path": "$HOME/Documents/repos_work",
      "depth": 1
    },
    {
      "path": "$HOME/code",
      "depth": 1
    },
    {
      "path": "$HOME/.config/nvim"
    },
    {
      "path": "$HOME/dotfiles"
    },
    {
      "path": "$HOME/Library/Mobile Documents/iCloud~md~obsidian/Documents/my-vault"
    }
  ]
}
EOF

FZF_KANAGAWA_COLORS="bg+:#363646,bg:#1F1F28,spinner:#7E9CD8,hl:#957FB8,fg:#DCD7BA,header:#7AA89F,info:#7FB4CA,pointer:#FF9E64,marker:#98BB6C,fg+:#FFFFFF,prompt:#BB9AF7,hl+:#E46876"
fzf_colored() {
    fzf --color="${FZF_KANAGAWA_COLORS}" "$@"
}

get_repos_and_dirs_from_config() {
    if ! command -v jq &> /dev/null; then
        echo "jq is required but not installed. Please install jq to parse JSON." >&2
        return 1
    fi
    
    # jq to extract paths and normalize paths
    echo "$CONFIG" | jq -r '.repos[].path' | 
        sed 's|//|/|g' |  # Remove double slashes
        sed 's|/$||'      # Remove trailing slash
}

# Function to select and create/switch to a project directory
tmux_select_project() {
    repo_list=""
    
    all_repos=$(get_repos_and_dirs_from_config)
    if [ $? -ne 0 ]; then
        return 1
    fi
    
    # Process each repo path
    while IFS= read -r repo_path; do
        repo_path=$(echo "$repo_path" | sed 's|//|/|g' | sed 's|/$||')
        
        if [ -d "$repo_path" ]; then
            # Get depth for this directory from config (null means it's a direct repo)
            depth=$(echo "$CONFIG" | jq -r ".repos[] | select((.path | tostring | rtrimstr(\"/\")) == \"$repo_path\") | .depth // null")
            
            # If no depth specified, it's a direct repo
            if [ -z "$depth" ] || [ "$depth" = "null" ]; then
                # Add the repo itself to the list
                if [ -n "$repo_list" ]; then
                    repo_list="$repo_list\n$repo_path"
                else
                    repo_list="$repo_path"
                fi
            else
                # Find subdirectories at the specified depth
                sub_repos=$(fd --follow --min-depth 1 --max-depth "$depth" --type d . "$repo_path" 2>/dev/null | sort)
                if [ -n "$repo_list" ]; then
                    repo_list="$repo_list\n$sub_repos"
                else
                    repo_list="$sub_repos"
                fi
            fi
        fi
    done <<< "$all_repos"
    
    # repo picker, replace $HOME with ~ for shorter path names

    selected_display=$(echo -e "$repo_list" | sed "s|^$HOME|~|g" | fzf_colored)

    
    if [ -n "$selected_display" ]; then
        # Convert displayed path (with ~) back to full path
        selected=$(echo "$selected_display" | sed "s|^~|$HOME|g")

        session_name=$(basename "$selected" | tr . _ | tr ' ' _)
        
        tmux has-session -t "$session_name" 2>/dev/null
        
        if [ $? -eq 0 ]; then
            tmux switch-client -t "$session_name"
        else
            tmux new-session -d -s "$session_name" -c "$selected"
            tmux switch-client -t "$session_name"
        fi
    fi
}

# Function to switch between existing sessions
tmux_switch_session() {
    current_session=$(tmux display-message -p '#S')
    
    # List all sessions except the current one
    selected=$(tmux list-sessions -F '#{session_name}' | grep -v "^$current_session\$" | fzf_colored)
    
    if [ -n "$selected" ]; then
        tmux switch-client -t "$selected"
    fi
}

# debug_paths() {
#   echo "Checking paths:"
#   echo "$CONFIG" | jq -r '.repos[].path' | while read -r path; do
#     expanded_path=$(echo "$path")
#     echo "Path: $expanded_path"
#     echo "Exists: $([ -d "$expanded_path" ] && echo "Yes" || echo "No")"
#   done
# }
#
# debug_paths

main() {
    case "$1" in
        "switch")
            tmux_switch_session
            ;;
        *)
            tmux_select_project
            ;;
    esac
}

main "$@"
